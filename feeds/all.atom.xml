<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Guilherme Toti</title><link href="http://www.guilhermetoti.com/" rel="alternate"></link><link href="http://www.guilhermetoti.com/feeds/all.atom.xml" rel="self"></link><id>http://www.guilhermetoti.com/</id><updated>2017-07-09T23:38:00-03:00</updated><entry><title>Using filter() in Javascript</title><link href="http://www.guilhermetoti.com/2017/07/09/using-filter-in-javascript/" rel="alternate"></link><published>2017-07-09T23:38:00-03:00</published><updated>2017-07-09T23:38:00-03:00</updated><author><name>Guilherme Toti</name></author><id>tag:www.guilhermetoti.com,2017-07-09:/2017/07/09/using-filter-in-javascript/</id><summary type="html">&lt;p&gt;Learn how to easily filter Arrays using the Array.prototype.filter method!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey, what's up?!&lt;/p&gt;
&lt;p&gt;Today I want to teach you guys how to easily filter &lt;strong&gt;Arrays&lt;/strong&gt; using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank"&gt;Array.prototype.filter&lt;/a&gt; method.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;filter()&lt;/strong&gt; method it's very simple to implement but it's also very powerful and helpful way to filter your data.&lt;/p&gt;
&lt;p&gt;In this article, I'll use the same example data object that I used on my previous article, about the &lt;a title="Check my last article about map() in javascript" href="http://guilhermetoti.com/2017/07/07/using-map-in-javascript/" target="_blank"&gt;map()&lt;/a&gt; method.&lt;/p&gt;
&lt;p&gt;So, the example data object is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const data = [
  {
    id: 1,
    name: &amp;#39;John Doe&amp;#39;,
    location: {
      city: &amp;#39;São Paulo&amp;#39;,
      state: &amp;#39;SP&amp;#39;,
      country: &amp;#39;Brazil&amp;#39;,
      zipcode: &amp;#39;00000-000&amp;#39;
    }
  },
  {
    id: 2,
    name: &amp;#39;Doe John&amp;#39;,
    location: {
      city: &amp;#39;Rio de Janeiro&amp;#39;,
      state: &amp;#39;RJ&amp;#39;,
      country: &amp;#39;Brazil&amp;#39;,
      zipcode: &amp;#39;11111-111&amp;#39;
    }
  },
  {
    id: 3,
    name: &amp;#39;Joe Dohn&amp;#39;,
    location: {
      city: &amp;#39;Curitiba&amp;#39;,
      state: &amp;#39;SP&amp;#39;,
      country: &amp;#39;Brazil&amp;#39;,
      zipcode: &amp;#39;123456-789&amp;#39;
    }
  }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;Let's imagine that you want to get from this array, only the objects where the &lt;strong&gt;location.state&lt;/strong&gt; are equal to &lt;strong&gt;SP&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Maybe on a first approach, you might be thinking on something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let newData = [];

for (let index in data) {
  const currentElement = data[index];
  if (currentElement.location.state === &amp;#39;SP&amp;#39;) {
    newData.push(currentElement);
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;It would work, right? Right, but, we are creating another variable to handle the new data and looping through the &lt;strong&gt;data&lt;/strong&gt; object, searching for a state equal to &lt;strong&gt;SP&lt;/strong&gt; and then, pushing this object to the new variable.&lt;/p&gt;
&lt;p&gt;I think we can do better than this, dont we?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yes! We can do it better!&lt;/strong&gt; Using the &lt;strong&gt;filter()&lt;/strong&gt; method!&lt;/p&gt;
&lt;p&gt;Let's see how it would be written using the &lt;strong&gt;filter()&lt;/strong&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const newData = data.filter(function(currentElement) {
  return currentElement.location.state === &amp;#39;SP&amp;#39;;
});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;The basic idea of the &lt;strong&gt;filter()&lt;/strong&gt; method is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- Pass to the filter() method a function who:
  - Receives the current element of the data array you&amp;#39;re filtering;
  - Do your logic;
  - Returns a boolean;
- The filter() method will loop through the data array executing your function and passing each element of the array as a param;
- If your function has returned true, then the current element will be added to the new array;
- Otherwise it will be just ignored;
- Returns the new array with the filtered data;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;And if you are learning about &lt;strong&gt;ES6&lt;/strong&gt;, the same code could be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const newData = data.filter((currentElement) =&amp;gt; currentElement.location.state === &amp;#39;SP&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;Cool, huh? :D
&lt;br/&gt; You can see the &lt;strong&gt;JSFiddle&lt;/strong&gt; of this article &lt;a href="https://jsfiddle.net/guilhermetoti/ab4gpvvt/" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Problably at this moment you must be thinking about your old codes and how to refactor them to use the &lt;strong&gt;filter()&lt;/strong&gt; method, right?&lt;/p&gt;
&lt;p&gt;Well, I hope so!&lt;/p&gt;
&lt;p&gt;That's it! If you guys have some question, please comment below!&lt;/p&gt;</content><category term="javascript"></category><category term="functional programming"></category></entry><entry><title>Using map() in Javascript</title><link href="http://www.guilhermetoti.com/2017/07/07/using-map-in-javascript/" rel="alternate"></link><published>2017-07-07T15:31:00-03:00</published><updated>2017-07-07T15:31:00-03:00</updated><author><name>Guilherme Toti</name></author><id>tag:www.guilhermetoti.com,2017-07-07:/2017/07/07/using-map-in-javascript/</id><summary type="html">&lt;p&gt;Learn how to use this simple and powerful javascript function called .map with easy and real-life examples.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello guys, how're you doing?
Hope you're doing great!&lt;/p&gt;
&lt;p&gt;In this post, I want to talk about the &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank"&gt;map()&lt;/a&gt;&lt;/strong&gt; function, a function related to &lt;code&gt;Arrays&lt;/code&gt; in Javascript that I use a lot and it's very useful for various situations.&lt;/p&gt;
&lt;p&gt;I'll show you guys some real-life examples, hope you guys like it!&lt;/p&gt;
&lt;h2&gt;map()&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;The &lt;strong&gt;map()&lt;/strong&gt; function is very useful when you need to translate or change the elements in an Array.
&lt;br/&gt;It loops through the Array &lt;strong&gt;from left to right&lt;/strong&gt;, creating a new Array, and, for each item, it runs some function that you passed as args, and your function must return an value, so, this return will be the new item of the new Array.&lt;/p&gt;
&lt;p&gt;Let's see an example below.&lt;/p&gt;
&lt;p&gt;Imagine that you receive this data from your API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const data = [
  {
    id: 1,
    name: &amp;#39;John Doe&amp;#39;,
    location: {
      city: &amp;#39;São Paulo&amp;#39;,
      state: &amp;#39;SP&amp;#39;,
      country: &amp;#39;Brazil&amp;#39;,
      zipcode: &amp;#39;00000-000&amp;#39;
    }
  },
  {
    id: 2,
    name: &amp;#39;Doe John&amp;#39;,
    location: {
      city: &amp;#39;Rio de Janeiro&amp;#39;,
      state: &amp;#39;RJ&amp;#39;,
      country: &amp;#39;Brazil&amp;#39;,
      zipcode: &amp;#39;11111-111&amp;#39;
    }
  },
  {
    id: 3,
    name: &amp;#39;Joe Dohn&amp;#39;,
    location: {
      city: &amp;#39;Curitiba&amp;#39;,
      state: &amp;#39;SP&amp;#39;,
      country: &amp;#39;Brazil&amp;#39;,
      zipcode: &amp;#39;123456-789&amp;#39;
    }
  }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;So, you have an array of objects with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- user id
- name
- location
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;Let's figure out we don't need all this data, we need only an array with objects like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  id: 1,
  name: &amp;#39;John Doe&amp;#39;,
  city: &amp;#39;São Paulo&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;Problably, to resolve that, you may be thinking in something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let newData = [];

for (var index in data) {
  const user = data[index];

  newData.push({
    id: user.id,
    name: user.name,
    city: user.location.city
  })
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;Right?
&lt;br/&gt;It isn't wrong, and it's works, but, there is a lot of steps, and, we can do it better!
&lt;br/&gt;&lt;br/&gt;Doing that way, you are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. Instancing a new variable;
2. Doing a `for` loop through the `data` Array, getting each index`;
3. Using this `index` to access the current element of the Array;
4. Pushing the new object to the variable previously created;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;The &lt;strong&gt;map()&lt;/strong&gt; function provides an easy way to do exactly this and with less steps!
&lt;br/&gt;&lt;br/&gt;Check below how to write the same using &lt;strong&gt;map()&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const newData = data.map(function(item) {
  return {
    id: item.id,
    name: item.name,
    city: item.location.city
  }
});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;Maybe your reaction be like:
&lt;img alt="WTF" src="http://www.guilhermetoti.com/images/wtf.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;But, keep calm, i'll explain every step!
&lt;br/&gt;&lt;br/&gt;When you execute &lt;strong&gt;Array.map()&lt;/strong&gt;, to clear your mind in a &lt;em&gt;real-life&lt;/em&gt; example, you can think in something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. The map() gets your Array;
2. Loop through it, and, for each item it:
   1. Execute the function you&amp;#39;ve passed, passing the current item as an argument;
   2. Update the current item value, to the returned value from your function;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;So, this also can be re-written to something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;item.id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;item.name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;city&lt;/span&gt;: &lt;span class="kt"&gt;item.location.city&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parseItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;It will produce the same result and has the same effect.&lt;/p&gt;
&lt;p&gt;And if you're familiar with ES6, you can re-write it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;const&lt;/span&gt; &lt;span class="nt"&gt;newData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;id,&lt;/span&gt; &lt;span class="err"&gt;name,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;id,&lt;/span&gt; &lt;span class="err"&gt;name,&lt;/span&gt; &lt;span class="err"&gt;city&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;But i'll not talk about ES6 now, maybe in another post! :P
&lt;br/&gt;&lt;br/&gt;Using any of the examples above, if you run a &lt;strong&gt;console.log(newData)&lt;/strong&gt;, you will receive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[
  {
    &amp;quot;id&amp;quot;: 1,
    &amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;,
    &amp;quot;city&amp;quot;: &amp;quot;São Paulo&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: 2,
    &amp;quot;name&amp;quot;: &amp;quot;Doe John&amp;quot;,
    &amp;quot;city&amp;quot;: &amp;quot;Rio de Janeiro&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: 3,
    &amp;quot;name&amp;quot;: &amp;quot;Joe Dohn&amp;quot;,
    &amp;quot;city&amp;quot;:&amp;quot;Curitiba&amp;quot;
  }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;So, that's it guys, as expected!!
&lt;br/&gt;You can see the &lt;strong&gt;JSFiddle&lt;/strong&gt; of this post &lt;a href="https://jsfiddle.net/guilhermetoti/bju032cw/" target="_blank"&gt;here&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;I hope you guys understand about the &lt;strong&gt;map()&lt;/strong&gt; function, but, if you have any questions please comment below!&lt;/p&gt;</content><category term="javascript"></category><category term="functional programming"></category></entry><entry><title>Be careful with PIP upgrades!</title><link href="http://www.guilhermetoti.com/2016/03/30/be-careful-with-pip-upgrades/" rel="alternate"></link><published>2016-03-30T23:59:00-03:00</published><updated>2016-03-30T23:59:00-03:00</updated><author><name>Guilherme Toti</name></author><id>tag:www.guilhermetoti.com,2016-03-30:/2016/03/30/be-careful-with-pip-upgrades/</id><summary type="html">&lt;p&gt;Hey guys! How are you going?
It have been a long time since my last post, I was working a lot and I had no time to read more, sorry...&lt;/p&gt;
&lt;p&gt;On this post I will talk about an experience that my friend and I lived upgrading PIP packages.&lt;/p&gt;
&lt;h4&gt;The situation …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;Hey guys! How are you going?
It have been a long time since my last post, I was working a lot and I had no time to read more, sorry...&lt;/p&gt;
&lt;p&gt;On this post I will talk about an experience that my friend and I lived upgrading PIP packages.&lt;/p&gt;
&lt;h4&gt;The situation&lt;/h4&gt;
&lt;p&gt;The Magazine Luiza's website was writted with Bottle, and is a bit old, so, as you can imagine, the PIP package's versions are old too.
We use Jinja2 to render templates, and, we wanted to upgrade some packages just to feel more confortable.
Well, we saw on &lt;code&gt;requirements&lt;/code&gt; that Jinja2 was on version &lt;code&gt;2.5.5&lt;/code&gt; and the last version was &lt;code&gt;2.8&lt;/code&gt;, so, we just changed the &lt;code&gt;2.5.5&lt;/code&gt; to &lt;code&gt;2.8&lt;/code&gt; and installed the requirements again. &lt;em&gt;Easy, huh?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But we didn't expect that this would broke almost everything! But, why?&lt;/p&gt;
&lt;h4&gt;The error&lt;/h4&gt;
&lt;p&gt;At some templates files, Jinja was throwing the error: &lt;code&gt;non-default argument follows default argument&lt;/code&gt;, but, wtf? We just upgraded to the new version! What's wrong? What have changed?&lt;/p&gt;
&lt;p&gt;We are almost getting crazy when we decided to search on Google, and, we saw this on &lt;a href="http://jinja.pocoo.org/docs/dev/changelog/#version-2-8"&gt;Jinja2's Version 2.8 Changelog&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* Added a check for default arguments followed by non-default arguments. This change makes {% macro m(x, y=1, z) %}...{% endmacro %} a syntax error. The previous behavior for this code was broken anyway (resulting in the default value being applied to y).
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Okay, but, what's wrong?&lt;/h4&gt;
&lt;p&gt;You must be thinking: &lt;code&gt;My gosh, this is stupid, everyone knows the default arguments are always first!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yeah, but, like I said, the code is old, and Jinja didn't had this check before, and we have found a lot of &lt;code&gt;macros&lt;/code&gt; like that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% macro test(a, b, c=None, d) -%}
    bla bla bla
{%- endmacro  %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, we had to refactor every piece of code that have this error... &lt;sad&gt;&lt;/p&gt;
&lt;h4&gt;What to learn with that?&lt;/h4&gt;
&lt;p&gt;Be careful when upgrading PIP packages, test everything after that, i said EVERYTHING.&lt;/p&gt;
&lt;p&gt;And, when you install some package, try to put the version in the &lt;code&gt;requirements&lt;/code&gt; file, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Jinja2==2.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you just put &lt;code&gt;Jinja2&lt;/code&gt; you will always get the last version, but, a simple upgrade can broke your project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip of the day: A no noticeable error can f*ck everything!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's all, cya!&lt;/p&gt;</content><category term="python"></category><category term="pip"></category><category term="upgrades"></category></entry><entry><title>Create a simple blog with Python Pelican and Github Pages - Part Two</title><link href="http://www.guilhermetoti.com/2016/01/19/create-a-simple-blog-with-python-pelican-and-github-pages-part-two/" rel="alternate"></link><published>2016-01-19T22:12:00-02:00</published><updated>2016-01-19T22:12:00-02:00</updated><author><name>Guilherme Toti</name></author><id>tag:www.guilhermetoti.com,2016-01-19:/2016/01/19/create-a-simple-blog-with-python-pelican-and-github-pages-part-two/</id><summary type="html">&lt;p&gt;Hey, there!&lt;/p&gt;
&lt;p&gt;How has been the python studies? It's going well? What did you learn today? Tell me on comments below :)&lt;/p&gt;
&lt;p&gt;Well, let's go to the second part of this tutorial.&lt;/p&gt;
&lt;p&gt;On the previous part i teach you how to create your simple blog and run locally, right? Alright, now …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey, there!&lt;/p&gt;
&lt;p&gt;How has been the python studies? It's going well? What did you learn today? Tell me on comments below :)&lt;/p&gt;
&lt;p&gt;Well, let's go to the second part of this tutorial.&lt;/p&gt;
&lt;p&gt;On the previous part i teach you how to create your simple blog and run locally, right? Alright, now i will teach you how to host it on Github Pages.&lt;/p&gt;
&lt;p&gt;Basically, to have a Pelican blog on Github Pages, you will have a repository named &lt;code&gt;your-username.github.io&lt;/code&gt; and this repository will have only two branches: &lt;code&gt;pelican&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt;.&lt;br/&gt;
The &lt;code&gt;pelican&lt;/code&gt; branch will store the pelican files, like: &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;theme&lt;/code&gt;, &lt;code&gt;plugins&lt;/code&gt;, &lt;code&gt;settings&lt;/code&gt;...&lt;br/&gt;
The &lt;code&gt;gh-pages&lt;/code&gt; will store the &lt;code&gt;output&lt;/code&gt; content.&lt;/p&gt;
&lt;p&gt;Let's start.&lt;/p&gt;
&lt;h1&gt;Login on your Github account&lt;/h1&gt;
&lt;p&gt;First you need to to login on &lt;a href="https://github.com"&gt;Github website&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Create a new repository&lt;/h1&gt;
&lt;p&gt;Now you need to create a new repository, but, there is a special thing, the repository name needs to be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;your-github-username.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On my case, the repository name will be &lt;code&gt;guilherme-toti.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Start git locally&lt;/h1&gt;
&lt;p&gt;After you create your repository, you will see a quick setup page, right?
Now, on &lt;code&gt;console&lt;/code&gt;, go to you blog folder and type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ git init
(blog) $ git remote add origin &amp;lt;your_repository_url&amp;gt;
(blog) $ git checkout -b pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we push the changes, let's do a little trick that would save your life, believe me.&lt;br/&gt;
Create a file named &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ touch .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open &lt;code&gt;.gitignore&lt;/code&gt; and paste this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Pelican output folder
output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This won't commit the &lt;code&gt;output&lt;/code&gt; folder to branch &lt;code&gt;pelican&lt;/code&gt; and you will have a cleaner branch :)&lt;/p&gt;
&lt;p&gt;Now, continue, running: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ git add .
(blog) $ git commit -m &amp;quot;Initial pelican files&amp;quot;
(blog) $ git push origin pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's go step-by-step:&lt;br/&gt;
&lt;code&gt;$ git init&lt;/code&gt; will start a git repository on this folder&lt;br/&gt;
&lt;code&gt;$ git remote add origin &amp;lt;your_repository_url&amp;gt;&lt;/code&gt; will add a remote, in this case, your git repository. &lt;em&gt;The repository url is on github quick setup page&lt;/em&gt;&lt;br/&gt;
&lt;code&gt;$ git checkout -b pelican&lt;/code&gt; will create and go to branch &lt;code&gt;pelican&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;$ git add .&lt;/code&gt; will prepare your files to next commit&lt;br/&gt;
&lt;code&gt;$ git commit -m "Initial pelican files"&lt;/code&gt; will commit all your changes&lt;br/&gt;
&lt;code&gt;# git push origin pelican&lt;/code&gt; will push this commit to the branch pelican. &lt;/p&gt;
&lt;p&gt;Now, to publish your content you need the pip module &lt;code&gt;ghp-import&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Just to remember: It's better to stay on a &lt;code&gt;virtualenv&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After install &lt;code&gt;ghp-import&lt;/code&gt;, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there you go! :)&lt;/p&gt;
&lt;p&gt;Now just wait some seconds and you can access your awesome blog at &lt;code&gt;http://your-github-username.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Congragulations!! Now you have a pretty cool blog hosted at Github Pages for free! :)&lt;/p&gt;
&lt;h1&gt;Quick Tips&lt;/h1&gt;
&lt;p&gt;Every time you change something or create new content you need to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ git add .
(blog) $ git commit -m &amp;quot;your commit message&amp;quot;
(blog) $ git push origin pelican
(blog) $ make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all folks!&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="github"></category></entry><entry><title>Create a simple blog with Python Pelican and Github Pages - Part One</title><link href="http://www.guilhermetoti.com/2016/01/18/create-a-simple-blog-with-python-pelican-and-github-pages-part-one/" rel="alternate"></link><published>2016-01-18T23:59:00-02:00</published><updated>2016-01-18T23:59:00-02:00</updated><author><name>Guilherme Toti</name></author><id>tag:www.guilhermetoti.com,2016-01-18:/2016/01/18/create-a-simple-blog-with-python-pelican-and-github-pages-part-one/</id><summary type="html">&lt;p&gt;Hello!&lt;br/&gt;
For the first post of my blog, why not talk about how to create one blog like this?&lt;br/&gt;
I will teach you how to create a simple blog using Pelican and host on Github Pages.&lt;br/&gt;
I'm gonna break this tutorial in &lt;strong&gt;two parts&lt;/strong&gt;, this first part i will teach …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;br/&gt;
For the first post of my blog, why not talk about how to create one blog like this?&lt;br/&gt;
I will teach you how to create a simple blog using Pelican and host on Github Pages.&lt;br/&gt;
I'm gonna break this tutorial in &lt;strong&gt;two parts&lt;/strong&gt;, this first part i will teach how to create your blog and at the second part i will teach how to host on Github Pages. Let's start!&lt;/p&gt;
&lt;h1&gt;What's Pelican?&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"Pelican is a static site generator, written in Python, that requires no database or server-side logic."&lt;/em&gt; &lt;a href="http://blog.getpelican.com/"&gt;From Pelican's website&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;What's the logic?&lt;/h1&gt;
&lt;p&gt;You just need to write &lt;code&gt;markdown&lt;/code&gt; files and this will be your pages and/or posts.&lt;br/&gt; Pelican will do all the magic :)&lt;/p&gt;
&lt;h1&gt;Cool! How do i start?&lt;/h1&gt;
&lt;p&gt;So, first of all, you need to ensure that you have &lt;a href="https://www.python.org" title="How to install Python"&gt;python&lt;/a&gt;, &lt;a href="https://pip.pypa.io/en/stable/installing/" title="How to install Pip"&gt;pip&lt;/a&gt; and &lt;a href="https://virtualenvwrapper.readthedocs.org" title="How to install Virtualenvwrapper"&gt;virtualenvwrapper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's assume that you already installed everything.&lt;/p&gt;
&lt;p&gt;First of all, let's create the blog directory and go to folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir blog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you're on blog directory, let's create the virtualenv with virtualenvwrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, you are now in virtualenv &lt;code&gt;blog&lt;/code&gt;, let's install &lt;strong&gt;pelican&lt;/strong&gt; using pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you have &lt;strong&gt;pelican&lt;/strong&gt;, to start your blog project just run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will ask you some questions about your blog and after that it will generate the basic files of your blog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My recommended answers to start:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where do you want to create your new web site? [.] &amp;lt;just press Enter&amp;gt;
&amp;gt; What will be the title of this web site? &amp;lt;Title of your blog&amp;gt;
&amp;gt; Who will be the author of this web site? &amp;lt;Your name&amp;gt;
&amp;gt; What will be the default language of this web site? [en] &amp;lt;just press Enter&amp;gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n) y
&amp;gt; How many articles per page do you want? [10] &amp;lt;just press Enter&amp;gt;
&amp;gt; What is your time zone? [Europe/Paris] &amp;lt;Your timezone&amp;gt; --&amp;gt; Check help below &amp;lt;--
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) y
&amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) y
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don't know your timezone? Maybe this &lt;a href="http://php.net/manual/en/timezones.php"&gt;link&lt;/a&gt; will help you.&lt;/strong&gt; (I know it's &lt;code&gt;PHP&lt;/code&gt;, but it will really help :P)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The cool part, writing posts&lt;/h2&gt;
&lt;p&gt;Now you can check that you have a folder called &lt;code&gt;content&lt;/code&gt;, right?&lt;br/&gt;
This folder is where your content must be.&lt;br/&gt;
Let's start creating a simple hello world.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Go to &lt;code&gt;content&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ cd content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a file called &lt;code&gt;hello.md&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ touch hello.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, now, open this file with you preferred text editor, i'll open with &lt;code&gt;vim&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ vim hello.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And copy/paste this into &lt;code&gt;hello.md&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Curious&lt;/span&gt;

&lt;span class="n"&gt;Hey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;awesome&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Every markdown file here need to have a minimal header as you can see above.&lt;br/&gt;
You need to have at least &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; and &lt;code&gt;Category&lt;/code&gt;.&lt;br/&gt;
Everything you write after the header will be the post content.&lt;/p&gt;
&lt;h2&gt;Nice, i feel's like a writer but how to make it work now?&lt;/h2&gt;
&lt;p&gt;This is the most simple part, after write your post(s), you just need to:&lt;/p&gt;
&lt;p&gt;If you are on &lt;code&gt;content&lt;/code&gt; folder, first you need go back to root folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll see a message like:&lt;br/&gt;
&lt;code&gt;Done: Processed 1 articles, 0 drafts, 0 pages and 0 hidden pages in 0.25 seconds.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This command will take every markdown file under &lt;code&gt;content&lt;/code&gt; folder and generate the &lt;code&gt;html&lt;/code&gt; pages on &lt;code&gt;output&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Easy, huh?&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;That's awesome, but, i'm not ready to push yet, how can i check it locally?&lt;/h2&gt;
&lt;p&gt;To run your blog locally simple run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And go check your awesome blog in: &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you have a really nice blog running locally!
On the next post i will teach how to host it on Github Pages.&lt;/p&gt;
&lt;h1&gt;Tips:&lt;/h1&gt;
&lt;p&gt;If you don't want to run &lt;code&gt;pelican content&lt;/code&gt; everytime you change a markdown file, you can run (&lt;em&gt;from root folder&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ make regenerate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will start a &lt;code&gt;real-time monitor&lt;/code&gt; that checks if some &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;theme&lt;/code&gt; or &lt;code&gt;settings&lt;/code&gt; was changed, then runs &lt;code&gt;pelican content&lt;/code&gt; automatically!&lt;/p&gt;
&lt;p&gt;Another cool tip is, if you are in development environment and want to serve your blog and check content in background automatically, you can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will act like if you are running &lt;code&gt;make serve&lt;/code&gt; and &lt;code&gt;make regenerate&lt;/code&gt; together, but in &lt;strong&gt;background&lt;/strong&gt;! Awesome!
If you want to stop the &lt;code&gt;devserver&lt;/code&gt;, just run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(blog) $ make stopserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the &lt;code&gt;devserver&lt;/code&gt; will be stopped!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Damn!&lt;/strong&gt; This Pelican is really awesome!&lt;/p&gt;
&lt;p&gt;That's all for today, cya!&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="github"></category></entry></feed>